   boolean flag;
boolean m_flag;
boolean trigger;
int triggerTempL;
int triggerTempR;

boolean shift;

int counter;
int moduleSize = 4;
int limiterL = 1;
int limiterR = moduleSize;
int incPaddle=1;

 int vTemp;
//button
int buttonX=25, buttonY=325; 
int buttonSize = 50;     
boolean boolButton = false;

int count;
Module[] mods;

void setup() {
  size(400, 400);
 mods = new Module[moduleSize];
 /*
 mods[0] = new Module(1*30,  30);
 mods[1] = new Module(2*30,  10);
 mods[2] = new Module(3*30,  40);
 mods[3] = new Module(4*30,  80);
 mods[4] = new Module(5*30,  50);
 mods[5] = new Module(6*30,  60);
 mods[6] = new Module(7*30,  70);
 mods[7] = new Module(8*30,  20);
 */
 mods[0] = new Module(1*30,  50);
 mods[1] = new Module(2*30,  40);
 mods[2] = new Module(3*30,  30);
 
 mods[3] = new Module(4*30,  20);
/*
 mods[4] = new Module(5*30,  10);
 
 mods[5] = new Module(6*30,  60);
 mods[6] = new Module(7*30,  70);
 mods[7] = new Module(8*30,  80);
*/
}

void draw() { 
  background(50);
   buttonUpdate();  
   for (Module mod : mods) {  mod.display();  }
  
   // paddle
 // rect (incPaddle*30, 85, 20, 5);
  rect (limiterR*30, 65, 20, 5);
  rect (limiterL*30, 75, 20, 5);
  
  textSize(25);
  text(counter,300,350);
  // draw button
  fill(150);
  rect(buttonX,buttonY,buttonSize,buttonSize);
   if(boolButton && mousePressed)  
  { 
    fill(200);
    rect(buttonX,buttonY,buttonSize,buttonSize);
   }
// println(flag);
}

class Module {
 int xOffset; 
 int rectHight;
  
// Contructor
   Module(int xOffsetTemp, int rectHightTemp) {
    xOffset = xOffsetTemp;  
    rectHight=rectHightTemp;
  }  
  // Custom method for drawing the object
  void display() {
   fill(255);
   rect(xOffset , 100, 20, rectHight);
   }
}

// button
void mouseReleased() {
 if(boolButton)
  {
  if(!m_flag)m_flag=true;
  if(shift) {if(limiterL<=limiterR)limiterL++; shift=false;}
  }   
 }
 
 void mousePressed() { 
 if(boolButton)
 {  
 counter++; 
// if(!flag)limiterL++;
 //  if(mods[incPaddle-1].rectHight < mods[limiterL-1].rectHight) flag=true;  
 sort(limiterL,limiterR);
  }
}

void sort(int L,int R){
 if(!trigger) {
 triggerTempL=L;
 triggerTempR=R;
 trigger=true;}
 //              //              //
 if(mods[L-1].rectHight > mods[R-1].rectHight && L<R)  
    {     
     vTemp= mods[L-1].rectHight;
     mods[L-1].rectHight=mods[R-1].rectHight;
     mods[R-1].rectHight=vTemp; 
     shift=true;
    }
 
 //              //              //
  
 if(!flag) if(m_flag){ if(L<=R)
                       L++; limiterL=L; m_flag=false;
                     }
 
   //if(mods[L].rectHight > mods[triggerTempL-1].rectHight  ) flag=true; 
/////////////////////////////////
   
   
   println(triggerTempL-1);
   if(!m_flag)  { if(L<=R)
                  R--; 
                  limiterR=R;
                }
                
   /*
 if(flag)
   { // if(m_flag)  {R--; m_flag=false;}
     
   if(mods[incPaddle-1].rectHight > mods[R-1].rectHight)  
    {     
     vTemp= mods[L-1].rectHight;
     mods[L-1].rectHight=mods[R-1].rectHight;
     mods[R-1].rectHight=vTemp;
    flag=false;
    }
      
   }
   */
   if(L>R) {trigger=false; sort(L,R);}
}


 void buttonUpdate() {
  if ( overButton(buttonX, buttonY, buttonSize, buttonSize)  ) {
    boolButton = true;
  } else {
   boolButton = false;
  }
}
boolean overButton(int x, int y, int width, int height)  {
  if (mouseX >= x && mouseX <= x+width && 
      mouseY >= y && mouseY <= y+height) {
    return true;
} else {
  return false;
  }
}
